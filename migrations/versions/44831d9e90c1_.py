"""empty message

Revision ID: 44831d9e90c1
Revises: 
Create Date: 2025-10-14 08:57:43.390749

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '44831d9e90c1'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('clean_data',
    sa.Column('clean_data_id', sa.Integer(), nullable=False),
    sa.Column('url', sa.Text(), nullable=True),
    sa.Column('text', sa.Text(), nullable=False),
    sa.Column('stopword_removed_tokens', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('raw_text', sa.Text(), nullable=False),
    sa.Column('link_gambar', sa.Text(), nullable=True),
    sa.Column('folder_gambar', sa.Text(), nullable=True),
    sa.Column('link_video', sa.Text(), nullable=True),
    sa.Column('folder_video', sa.Text(), nullable=True),
    sa.Column('segments', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('clean_data_id')
    )
    with op.batch_alter_table('clean_data', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_clean_data_url'), ['url'], unique=True)

    op.create_table('predict_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('child_id', sa.Text(), nullable=False),
    sa.Column('parent_id', sa.Text(), nullable=False),
    sa.Column('log_id', sa.Text(), nullable=True),
    sa.Column('url', sa.Text(), nullable=False),
    sa.Column('label', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('screenshot_data',
    sa.Column('screenshot_id', sa.Integer(), nullable=False),
    sa.Column('text', sa.Text(), nullable=False),
    sa.Column('raw_text', sa.Text(), nullable=False),
    sa.Column('stopword_removed_tokens', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('folder_gambar', sa.Text(), nullable=False),
    sa.Column('label', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('screenshot_id')
    )
    op.create_table('url_classification',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('url', sa.Text(), nullable=True),
    sa.Column('label', sa.String(length=255), nullable=False),
    sa.Column('stopword_removed_tokens', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('url')
    )
    op.drop_table('child_device')
    op.drop_table('_prisma_migrations')
    op.drop_table('log_activity')
    with op.batch_alter_table('parents', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('parents_email_key'))

    op.drop_table('parents')
    op.drop_table('child')
    op.drop_table('notifications')
    op.drop_table('parents_device')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('parents_device',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('parentsId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('deviceToken', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('deletedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parentsId'], ['parents.id'], name=op.f('parents_device_parentsId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('parents_device_pkey'))
    )
    op.create_table('notifications',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('parentId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('childId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('logId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('deletedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['childId'], ['child.id'], name=op.f('notifications_childId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['parentId'], ['parents.id'], name=op.f('notifications_parentId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('notifications_pkey'))
    )
    op.create_table('child',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('parentsId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('deletedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parentsId'], ['parents.id'], name='child_parentsId_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name='child_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('parents',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('password', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('deletedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='parents_pkey'),
    postgresql_ignore_search_path=False
    )
    with op.batch_alter_table('parents', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('parents_email_key'), ['email'], unique=True)

    op.create_table('log_activity',
    sa.Column('log_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('childId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('web_title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('web_description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('detail_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('grant_access', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('parentId', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('deletedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['childId'], ['child.id'], name=op.f('log_activity_childId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['parentId'], ['parents.id'], name=op.f('log_activity_parentId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('log_id', name=op.f('log_activity_pkey'))
    )
    op.create_table('_prisma_migrations',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('checksum', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('finished_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('migration_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('logs', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rolled_back_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('applied_steps_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('_prisma_migrations_pkey'))
    )
    op.create_table('child_device',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('childId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('deviceToken', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('deletedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['childId'], ['child.id'], name=op.f('child_device_childId_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('child_device_pkey'))
    )
    op.drop_table('url_classification')
    op.drop_table('screenshot_data')
    op.drop_table('predict_data')
    with op.batch_alter_table('clean_data', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_clean_data_url'))

    op.drop_table('clean_data')
    # ### end Alembic commands ###
